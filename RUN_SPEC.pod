=head1 DESCRIPTION

This is the specification for the data structure Test2::Harness Test Runs will
serialize to. Normally this structure will be saved as JSON data, but any
format is fine.

This structure captures everything the harness reads from each test job it
runs. This is everything necessary to replay and inspect a test run after it
has happened.

=head1 EXAMPLE

    {
        # The run id, need not be numerical or sequential
        id => 'A1',

        # Array of all jobs that ran
        jobs => [
            {
                id        => 'A1a',               # The job id, need not be numerical, sequential, or tied to run_id
                test_file => '/path/to/foo.t',    # The test file that was run
                pid       => 99,                  # Process ID
                stamp     => 12345,               # Time the job was started
                exit      => 127,                 # Exit value

                # Array of events (facet_data)
                # Not present for non-test2 based tests
                events => [
                    {assert => {pass  => 1, details => 'test 1'}},
                    {assert => {pass  => 1, details => 'test 2'}},
                    {assert => {pass  => 1, details => 'test 3'}},
                    {plan   => {count => 3}},
                ],

                # All stderr that was captured
                # (Does not include any formatter output, only prints/warnings/system())
                stderr => [
                    "stderr line 1\n",
                    "stderr line 2\n",
                    "stderr line 3\n",
                ],

                # All stdout that was captured
                # (Does not include any formatter output, only prints/warnings/system())
                stdout => [
                    "stdout line 1\n",
                    "stdout line 2\n",
                    "stdout line 3\n",
                ],

                # This is *MOST* lines from STDOUT/STDERR *AND* serialized events
                # This is only present when Test2::Plugin::IOMuxer is used
                muxed => [
                    {stamp => 12345, fileno => 3, buffer => "{'assert': {'pass':'1','details':'test 1'}}"},
                    {stamp => 12345, fileno => 1, buffer => "stdout line 1\n"},
                    {stamp => 12345, fileno => 2, buffer => "stderr line 1\n"},
                    {stamp => 12345, fileno => 3, buffer => "{'assert': {'pass':'1','details':'test 2'}}"},
                    {stamp => 12345, fileno => 1, buffer => "stdout line 2\n"},
                    {stamp => 12345, fileno => 2, buffer => "stderr line 2\n"},
                    {stamp => 12345, fileno => 3, buffer => "{'assert': {'pass':'1','details':'test 3'}}"},
                    {stamp => 12345, fileno => 1, buffer => "stdout line 3\n"},
                    {stamp => 12345, fileno => 2, buffer => "stderr line 3\n"},
                    {stamp => 12345, fileno => 3, buffer => "{'plan':{'count':'3'}}"},
                ],
            },

            ...    # Other jobs
        ],
    };

=head1 BREAKDOWN

Explanation of keys

=head2 id => "anything really"

Each run gets an ID. This can be anything, an auto-generated one will be used
by default.

=head2 jobs => [...]

Each file the harness runs will get a job entry, here are its keys:

=over 4

=item id => 'A1a'

The job ID. These can be anything, but Test2::Harness will usually use
sequential numbers starting at 1.

=item test_file => '/path/to/foo.t'

The test file the job ran

=item pid => 99

The process ID the job had

=item stamp => 12345

Timestamp of when the job started

=item exit => 127

Exit value of the test script. This will be 0 for success, a number for false,
or undef if the job was not observed to ever exit.

=item events => [ {assert => {pass => 1, details => 'test 1'}}, ... ]

B<Note:> Not always present, only present when Test2 is used, and the harness
successfully overrides the default formatter.

Each entry in this array is the serialized facet_data from each event that was
sent.

=item stderr => [ "text\n", ... ]

This is every line of STDERR that the harness captured from the job. This can
include diagnostics for non-test2 tests, or if the TAP formatter is forced.

=item stdout => [ "test\n", ... ]

This is every line of STDOUT that the harness captured from the job. This can
include TAP output if non-test2 tests were run, or if the default TAP formatter
is forced.

=item muxed => [ {stamp => 12345, fileno => 1, buffer => "stdout line 1\n"} ]

B<Note:> This will only be included if Test2::Plugin::IOMuxer is loaded (and
properly configured by the harness).

This is an ordered list of all STDERR, STDOUT, and events (in JSON form) that
were seen. This can be used to properly sort events when order is lost by the
split between STDOUT, STDERR, and events.

B<Note:> This cannot capture output from subprocesses run by C<system()>,
C<open()>, C<exec()>, or any other source that bypasses PerlIO layers. As such
you should only use this for sorting, you should not use it as a single-source
of information, it will eventually be missing something.



=back


