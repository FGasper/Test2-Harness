#!/usr/bin/env perl
use strict;
use warnings;

BEGIN {
    no warnings 'once';
    require File::Spec;
    my $script = File::Spec->rel2abs(__FILE__);
    $App::Yath::SCRIPT = $script;
    $ENV{YATH_SCRIPT} = $script;
}

our $VERSION = '0.001007';

use App::Yath::Util qw/load_command/;
use List::Util qw/sum/;
use Time::HiRes qw/time/;

use Test2::Util qw/pkg_to_file/;

use Test2::Util::Times qw/render_bench/;

my $cmd_name;
if (@ARGV && -f $ARGV[0] && $ARGV[0] =~ m/\.jsonl(\.bz2|\.gz)$/) {
    $cmd_name = 'replay';
}
elsif(!@ARGV || -d $ARGV[0] || -f $ARGV[0] || substr($ARGV[0],0,1) eq '-') {
    $cmd_name = 'test';
}
else {
    $cmd_name = shift @ARGV;
}

unless ($cmd_name eq 'spawn') {
    my $cmd_class = load_command($cmd_name);

    my $cmd = $cmd_class->new(args => \@ARGV);

    my $start = time;
    my $exit  = $cmd->run;

    if ($cmd->show_bench) {
        my $end = time;
        my $bench = render_bench($start, $end, times);
        print $bench, "\n\n";
    }

    exit $exit;
}

########################################
# Spawn command follows  \/
########################################

my ($class, $dir, %args) = @ARGV;

if ($args{setsid}) {
    require POSIX;
    POSIX::setsid();
}

my $pid = $$;
END {
    local ($?, $!, $@);
    if ($args{pfile} && -f $args{pfile} && $pid == $$) {
        print "Deleting $args{pfile}\n";
        unlink($args{pfile}) or warn "Could not delete $args{pfile}: $!\n";
    }
}

my $file = pkg_to_file($class);
require $file;
my $spawn = $class->new(
    dir => $dir,
);

my $test = $spawn->start;

# Do not keep these signal handlers post-fork when we are running a test file.
$SIG{HUP}  = 'DEFAULT';
$SIG{INT}  = 'DEFAULT';
$SIG{TERM} = 'DEFAULT';

unless($test) {
    my $complete = File::Spec->catfile($dir, 'complete');
    open(my $fh, '>', $complete) or die "Could not open '$complete'";
    print $fh '1';
    close($fh);
    exit 0;
}

$@ = '';

if (ref($test) eq 'CODE') {
    $test->();
}
else {
    do $test;
    die $@ if $@;
}

exit 0;



__END__

=pod

=encoding UTF-8

=head1 NAME

yath - Primary Command Line Interface (CLI) for Test2::Harness

=head1 DESCRIPTION

=head1 SOURCE

The source code repository for Test2-Harness can be found at
F<http://github.com/Test-More/Test2-Harness/>.

=head1 MAINTAINERS

=over 4

=item Chad Granum E<lt>exodist@cpan.orgE<gt>

=back

=head1 AUTHORS

=over 4

=item Chad Granum E<lt>exodist@cpan.orgE<gt>

=back

=head1 COPYRIGHT

Copyright 2017 Chad Granum E<lt>exodist7@gmail.comE<gt>.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

See F<http://dev.perl.org/licenses/>

=cut
